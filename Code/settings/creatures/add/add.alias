multiline
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def add_creature(svar_dict: dict, creature_name: str, creature_settings: dict, creature_errors: dict, default_settings: dict) -> tuple(dict, dict):
    """
    Handles adding the creature to the SVAR

    Args:
        svar_dict (dict): SVAR dictionary
        creature_name (str): Creature name
        creature_settings (dict): Creature settings
        creature_errors (dict): Creature errors
        default_settings (dict): Default settings

    Return:
        dict: SVAR dictionary
        dict: Creature errors
    """

    def edit_creature_errors(creature_errors: dict, creature_name:str, error_message: str) -> dict:
        """
        Args:
            creature_errors (dict): Creature errors
            creature_name (str): Creature name
            error_message (str): Error message

        Return:
            dict: Updated creature errors
        """

        # If creature is in creature errors
        if creature_name in creature_errors.keys():
            creature_errors[creature_name].append(error_message)

        # If creature not in creature errors
        else:
            creature_errors[creature_name] = list(error_message)

        return creature_errors


    def expand_hex_color(three_digit_hex: str) -> str|bool:
        """
        Expands 3-digit hex into 6-digit hex

        Args:
            three_digit_hex (str): 3-digit hex code

        Return:
            str|bool: 6-digit hex code, False if error
        """

        # If invalid input
        if not all(c in "0123456789ABCDEF" for c in (three_digit_hex := three_digit_hex.upper())):
            return False

        # Collect RGB values
        r = three_digit_hex[0]
        g = three_digit_hex[1]
        b = three_digit_hex[2]

        return "#" + r + r + g + g + b + b


    # Create copy of dictionary
    creature_settings_copy = creature_settings.copy()

    # If setting within copy of settings dictionary
    for setting in creature_settings_copy.keys():

        match setting:

            # Success key
            case "succ":

                # Try to convert success to an integer
                try:
                    creature_settings["succ"] = int(creature_settings["succ"])

                    # If success less than 1
                    if creature_settings["succ"] < 1:
                        creature_settings["succ"] = 1

                # Successes do not exist
                except "KeyError":
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Successes Required is a required argument")

                # Invalid input
                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Successes Required must be a non-negative number")

            # Failure key
            case "fail":

                # Try to convert failure to an integer
                try:
                    creature_settings["fail"] = int(creature_settings["fail"])

                    # If failure less than 1
                    if creature_settings["fail"] < 1:
                        creature_settings["fail"] = 1

                # Failures do not exist
                except "KeyError":
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Maximum Failures is a required argument")

                # Invalid input
                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Maximum Failures must be a non-negative number")

            # Cooldown key
            case "cooldown":

                # Try to convert cooldown to an integer
                try:
                    creature_settings["cooldown"] = int(creature_settings["cooldown"])

                    # If cooldown less than 1
                    if creature_settings["cooldown"] < 1:
                        creature_settings["cooldown"] = 1

                # Cooldown does not exist
                except "KeyError":
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Cooldown (in seconds) is a required argument")

                # Invalid input
                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Cooldown (in seconds) must be a non-negative number")

            # DC key
            case "dc":

                # Try to convert cooldown to an integer
                try:
                    creature_settings["dc"] = int(creature_settings["dc"])

                    # If DC is less than 1
                    if creature_settings["dc"] < 1:
                        creature_settings["dc"] = 1

                # DC does not exist
                except "KeyError":
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "DC is a required argument")

                # Invalid input
                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "DC must be a non-negative number")

            # Character level
            case "lvl":

                # Try to convert character level to an integer
                try:
                    creature_settings["lvl"] = int(creature_settings["lvl"])

                    # If level is greater than 1
                    if creature_settings["lvl"] > 1:

                        # If level is greater than 20
                        if creature_settings["lvl"] > 20:
                            creature_settings["lvl"] = 20

                    # If level is less than 2
                    else:
                        creature_settings.pop("lvl")

                # Character level does not exist
                except "KeyError":
                    pass

                # Invalid input
                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Required Character Level must be a non-negative number") 

            # Taming cost
            case "cost":

                # Try to convert taming cost to a float
                try:
                    creature_settings["cost"] = round(float(creature_settings["cost"]), 2)

                    # If taming cost is 0
                    if creature_settings["cost"] == 0:
                        creature_settings.pop("cost")

                # Taming cost does not exist
                except "KeyError":
                    pass

                # Invalid input
                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Taming Cost (in GP) must be a number")

            # Experience Gain
            case "xp":

                # Try to convert experience gain to an integer
                try:
                    creature_settings["xp"] = int(creature_settings["xp"])

                    # If experience gain is 0
                    if creature_settings["xp"] == 0:
                        creature_settings.pop("xp")

                # Experience gain does not exist
                except "KeyError":
                    pass

                # Invalid input
                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Experience Gain must be a number")

            # Color hex code
            case "color":

                # Try to use color hex
                try:

                    # If 6-digit hex input contains #
                    if (length := len(creature_settings["color"])) == 7:
                        creature_settings["color"] = creature_settings["color"].upper()

                    # If 6-digit hex input does not contain #
                    elif length == 6:
                        creature_settings["color"] = "#" + creature_settings["color"].upper()

                    # If 3-digit hex input contains #
                    elif length == 4:

                        color = expand_hex_color(creature_settings["color"][1:].upper())

                        # If invalid input
                        if not color:
                            err("Invalid Input")

                        # If valid input
                        else:
                            creature_settings["color"] = color

                    # If 3-digit hex input does not contain #
                    elif length == 3:

                        color = expand_hex_color(creature_settings["color"].upper())

                        # If invalid input
                        if not color:
                            err("Invalid Input")

                        # If valid input
                        else:
                            creature_settings["color"] = color

                    # If does not follow normal constraints
                    else:
                        err("Invalid Input")

                    # If invalid input
                    if not all(c in "#0123456789ABCDEF" for c in creature_settings["color"].upper()):
                        err("Invalid Input")


                # If color hex does not exist
                except "KeyError":
                    pass

                # Invalid input
                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Color Hex Code is invalid")

    # Not allowed creature names
    not_allowed_list = ["clear", "edit", "history", "list", "restore", "settings"]

    # If creature name is not allowed
    if creature_name.lower() in not_allowed_list:
        creature_errors = edit_creature_errors(creature_errors, creature_name, f"Creature name cannot be {creature_name}")

    # If no errors
    if len(creature_errors) == 0:
        svar_dict["creatures"][creature_name] = creature_settings

    return svar_dict, creature_errors


def main(input_list: list[str]) -> tuple(str, str):
    """
    Main program function

    Args:
        input_list (list[str]): List of user inputs

    Return:
        str: Embed string
        str: SVAR string
    """

    # Collect date, prefix, and subalias string
    date = "3/3/24"
    prefix = ctx.prefix
    subalias_str = f"{prefix}tame settings creatures add [creature name] [-succ] [-fail] [-cooldown] [-dc]\n"

    # If there is at least 9 inputs
    if len(input_list) > 8:

        # Load default settings
        default_settings = {
            "cost": 0,
            "xp": 0,
            "color": ""
        }

        # If SVAR exists, load dictionary
        if (svar_test := get_svar("tame_settings")):
            svar_dict = load_json(svar_test)

        # If SVAR does not exist
        else:
            svar_dict = {
                "creatures": {},
                "settings": {}
            }

    # If no inputs were given
    else:
        return f"{prefix}embed -title 'You Have Been Sneak Attacked by an Error' -f 'Expected at least creature name, -succ, -fail, -cooldown, and -DC' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png' -color '#CF142B' -footer '{subalias_str}{date} | ShadowsStride'", ""

    # If first input does not start with -
    if input_list[0][0] != "-":

        # Grab creature name
        creature_name = input_list.pop(0)

        # Parse arguments
        args = argparse(" ".join(input_list))

        # Collect arguments
        changes_dict = {
            "succ": args.last("succ", default=False),
            "fail": args.last("fail", default=False), 
            "cooldown": args.last("cooldown", default=False),
            "dc": args.last("dc", default=False)
            }

        # Create label_mapping
        label_map = {
            "succ": "Successes Required",
            "fail": "Maximum Failures", 
            "cooldown": "Cooldown (in seconds)",
            "dc": "DC"
            }

        # If arguments are missing
        if False in changes_dict.values():

            # Compile output
            f_list = ["You are missing required argument(s):"] + [label_map[req] for req in changes_dict if changes_dict[req] == False]

            return f"{prefix}embed -title 'You Have Been Sneak Attacked by an Error' -f '" + "\n".join(f_list) + f"' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png' -color '#CF142B' -footer '{subalias_str}{date} | ShadowsStride'", ""

        # If match found
        if (search_result := search_list(creature_name, svar_dict["creatures"].keys())):

            # For each match
            for match in search_result:

                # If exact match
                if match.lower() == creature_name.lower():
                    return f"{prefix}embed -title 'You Have Been Sneak Attacked by an Error' -f 'That creature already exists' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png' -color '#CF142B' -footer '{subalias_str}{date} | ShadowsStride'", ""

        # Collect optional arguments
        changes_dict.update({
            "lvl": args.last("lvl", default=False),
            "cost": args.last("cost", default=False),
            "xp": args.last("xp", default=False),
            "color": args.last("color", default=False)
        })

        # Create dictionary to hold errors
        creature_errors = {}

        # Grab updated SVAR dictionary and errors
        svar_dict, creature_errors = add_creature(svar_dict, creature_name, {key:value for key, value in changes_dict.items() if value != False}, creature_errors, default_settings)

        # If no errors
        if len(creature_errors) == 0:

            # Create color list
            color_list = []

            # For each creature in creatures
            for creature_name, creature_settings in svar_dict["creatures"].items():

                # If color exists
                if "color" in creature_settings.keys():
                    color_list.append(creature_settings["color"])

            # If at least one color found
            if len(color_list) > 0:
                color = randchoice(color_list)

            # If no color found
            else:
                color = ""

            return f"{prefix}embed -title 'Adding {creature_name} to the Taming Settings' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/main.png' -color '{color}' -footer '{subalias_str}{date} | ShadowsStride'", f"{prefix}svar tame_settings {dump_json(svar_dict)}"

        # If errors
        else:
            creature_errors[creature_name].insert(0, "**Errors:**")

            return f"{prefix}embed -title 'You Have Been Sneak Attacked by an Error' -f '" + "\n".join(creature_errors[creature_name]) + f"' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png' -color '#CF142B' -footer '{subalias_str}{date} | ShadowsStride'", ""

    # If first argument starts with -
    else:
        return f"{prefix}embed -title 'You Have Been Sneak Attacked by an Error' -f 'Creature name must be the first argument and cannot start with -' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png' -color '#CF142B' -footer '{subalias_str}{date} | ShadowsStride'", ""


embed_str, svar_str = main(&ARGS&)


</drac2>
{{embed_str}}
{{svar_str}}