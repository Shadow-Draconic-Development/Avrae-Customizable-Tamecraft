multiline
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def edit_creature(svar_dict: dict, creature_name: str, creature_settings: dict, creature_errors: dict, default_settings: dict) -> tuple(dict, dict):

    def edit_creature_errors(creature_errors: dict, creature_name:str, error_message: str) -> dict:

        if creature_name in creature_errors:
            creature_errors[creature_name].append(error_message)

        else:
            creature_errors[creature_name] = list(error_message)

        return creature_errors

    creature_settings_copy = creature_settings.copy()

    for setting in creature_settings_copy.keys():

        match setting:

            case "succ":

                # Successes
                try:
                    creature_settings["succ"] = int(creature_settings["succ"])

                    if creature_settings["succ"] > 0:
                        pass

                    elif creature_settings["succ"] < 0:
                        
                        creature_errors = edit_creature_errors(creature_errors, creature_name, "Successes Required must be a non-negative number")

                    else:
                        creature_settings["succ"] = 1

                except "KeyError":
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Successes Required is a required argument")

                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Successes Required must be a non-negative number")

            case "fail":

                # Failures
                try:
                    creature_settings["fail"] = int(creature_settings["fail"])

                    if creature_settings["fail"] > 0:
                        pass

                    elif creature_settings["fail"] < 0:
                        
                        creature_errors = edit_creature_errors(creature_errors, creature_name, "Maximum Failures must be a non-negative number")

                    else:
                        creature_settings["fail"] = 1

                except "KeyError":
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Maximum Failures is a required argument")

                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Maximum Failures must be a non-negative number")

            case "cooldown":

                # Cooldown
                try:
                    creature_settings["cooldown"] = int(creature_settings["cooldown"])

                    if creature_settings["cooldown"] > 0:
                        pass

                    elif creature_settings["cooldown"] < 0:
                        
                        creature_errors = edit_creature_errors(creature_errors, creature_name, "Cooldown (in seconds) must be a non-negative number")

                    else:
                        creature_settings["cooldown"] = 1

                except "KeyError":
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Cooldown (in seconds) is a required argument")

                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Cooldown (in seconds) must be a non-negative number")

            case "dc":

                # DC
                try:
                    creature_settings["dc"] = int(creature_settings["dc"])

                    if creature_settings["dc"] > 0:
                        pass

                    elif creature_settings["dc"] < 0:
                        
                        creature_errors = edit_creature_errors(creature_errors, creature_name, "DC must be a non-negative number")

                    else:
                        creature_settings["dc"] = 1

                except "KeyError":
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "DC is a required argument")

                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "DC must be a non-negative number")

            case "lvl":

                # Character Level
                try:
                    creature_settings["lvl"] = int(creature_settings["lvl"])

                    if creature_settings["lvl"] > 1:

                        if creature_settings["lvl"] <= 20:
                            pass

                        else:
                            creature_settings["lvl"] = 20

                    elif creature_settings["lvl"] < 0:
                        
                        creature_errors = edit_creature_errors(creature_errors, creature_name, "Required Character Level must be a non-negative number")

                    else:
                        creature_settings.pop("lvl")

                except "KeyError":
                    pass

                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Required Character Level must be a non-negative number") 

            case "cost":

                # Taming Cost
                try:
                    creature_settings["cost"] = round(float(creature_settings["cost"]), 2)

                    if creature_settings["cost"] != 0:
                        pass

                    else:
                        creature_settings.pop("cost")

                except "KeyError":
                    pass

                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Taming Cost (in GP) must be a number")

            case "xp":

                # Experience Gain
                try:
                    creature_settings["xp"] = int(creature_settings["xp"])

                    if creature_settings["xp"] != 0:
                        pass

                    else:
                        creature_settings.pop("xp")

                except "KeyError":
                    pass

                except:
                    creature_errors = edit_creature_errors(creature_errors, creature_name, "Experience Gain must be a number")

            case "color":

                # Hex Code
                try:
                    if (length := len(creature_settings["color"])) == 7:
                        creature_settings["color"] = creature_settings["color"].upper()

                    elif length == 6:
                        creature_settings["color"] = "#" + creature_settings["color"].upper()

                    else:
                        creature_errors = edit_creature_errors(creature_errors, creature_name, "Color Hex Code is invalid")

                        return svar_dict, creature_errors

                    for letter in creature_settings["color"]:
                        if letter in ["#", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F"]:
                            pass

                        else:
                            creature_errors = edit_creature_errors(creature_errors, creature_name, "Color Hex Code is invalid")

                            return svar_dict, creature_errors

                except:
                    pass

            case _:
                pass

    if len(creature_errors) == 0:
        svar_dict["creatures"][creature_name] = creature_settings

    else:
        pass
    
    return svar_dict, creature_errors


def main(input_dict: dict) -> tuple(str, str):
    date = "2/19/24"
    prefix = ctx.prefix
    subalias_str = f"{prefix}tame settings creatures import [JSON string]"

    default_settings = {
        "cost": 0,
        "xp": 0,
        "color": ""
    }

    if (svar_test := get_svar("tame_settings")):
        svar_dict = load_json(svar_test)

    else:
        svar_dict = {"creatures": {}}

    creatures_created = []
    creatures_edited = []
    creature_errors = {}

    for creature_name, creature_value in input_dict.items():

        if not (search_result := search_list(creature_name, svar_dict["creatures"].keys())):
            svar_dict, creature_errors = edit_creature(svar_dict, creature_name, creature_value, creature_errors, default_settings)
            
            if not creature_name in creature_errors.keys():
                creatures_created.append(creature_name)

            else:
                pass

        else:
            found = False

            for match in search_result:

                if match.lower() != creature_name.lower():
                    pass

                else:
                    found = True
                    svar_dict, creature_errors = edit_creature(svar_dict, creature_name, creature_value, creature_errors, default_settings)
                    
                    if not creature_name in creature_errors.keys():
                        creatures_edited.append(creature_name)

                    else:
                        pass

                if not found:
                    svar_dict, creature_errors = edit_creature(svar_dict, creature_name, creature_value, creature_errors, default_settings)
                    
                    if not creature_name in creature_errors.keys():
                        creatures_created.append(creature_name)

                    else:
                        pass

                else:
                    pass

    output_list = ["**Creatures Added:**"]

    if len(creatures_created) > 0:
        for creature_name in creatures_created:
            output_list.append(f"- {creature_name}")

    else:
        output_list.append("None")

    output_list.append("\n**Creatures Edited:**")

    if len(creatures_edited) > 0:
        for creature_name in creatures_edited:
            output_list.append(f"- {creature_name}")

    else:
        output_list.append("None")

    if len(creature_errors) == 0:
        pass

    else:
        output_list.append("\n**Errors**")

        for creature_name, error_list in creature_errors.items():
            output_list.append(f"- {creature_name}")

            for error in error_list:
                output_list.append(f"    - {error}")

    if len(creatures_created) > 0 or len(creatures_edited) > 0: 
        svar_str = f"{prefix}svar tame_settings {dump_json(svar_dict).replace(' ', '')}"

    else:
        svar_str = ""

    if len(creature_errors) != 0:
        color = "#CF142B"
        thumb = "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png"

    else:

        color_list = []
        for creature_name, creature_value in svar_dict["creatures"].items():
            if "color" in creature_value.keys():
                color_list.append(creature_value["color"])

            else:
                pass

        if len(color_list) > 0:
            color = randchoice(color_list)

        else:
            color = ""

        thumb = "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/main.png"

    return f"{prefix}embed -title 'Importing Creatures' -f '" + "\n".join(output_list) + f"' -thumb '{thumb}' -color '{color}' -footer '{subalias_str} | {date} | ShadowsStride'", svar_str


input_dict = %*%
embed_str, svar_str = main(input_dict)


</drac2>
{{embed_str}}
{{svar_str}}
