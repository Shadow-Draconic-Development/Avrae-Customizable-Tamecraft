embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def money_transact(ch: AliasCharacter, amt: float) -> tuple(dict|None, str):
    """
    Handles transactions in and out of characters coin purse

    Args:
        ch (AliasCharacter): Character object
        amt (float): Money to remove/add (If positive, remove. If negative, add)
    
    Return:
        dict|None: Delta change dictionary, None if error
        str: Message
    """

    def coin_parse(amt: float) -> tuple(int, int, int):
        """
        Parses out coin amount into gold, silver, and copper
        
        Args:
            amt (float): Amount to be parsed

        Return:
            int: Gold amount
            int: Silver amount
            int: Copper amount
        """

        # Get the absolute value of the amount
        abs_amt = abs(amt)

        # Calculate gold, silver, and copper components
        gold = int(abs_amt)
        silver = int((abs_amt * 10) % 10)
        copper = int((abs_amt * 100) % 10)

        # Apply sign to each component
        gold *= -1 if amt < 0 else 1
        silver *= -1 if amt < 0 else 1
        copper *= -1 if amt < 0 else 1

        return gold, silver, copper

    # Get current coin purse
    current_coinpurse = ch.coinpurse

    # If amount is positive (subtracting from purse)
    if amt > 0:

        # If amount is less than character money amount
        if amt <= (total_amt := current_coinpurse.get_coins()["total"]):

            # Parse out amounts (negative)
            gold, silver, copper = coin_parse(amt * -1)

            return current_coinpurse.modify_coins(gp=gold, sp=silver, cp=copper), ""

        # If amount is greater than character money amount
        else:

            # Parse out difference
            gold, silver, copper = coin_parse(abs(total_amt - amt))

            output_list = []

            # If more than 0 gold
            if gold > 0:
                output_list.append(f"{gold} gold")

            # If more than 0 silver
            if silver > 0:
                output_list.append(f"{silver} silver")

            # If more than 0 copper
            if copper > 0:
                output_list.append(f"{copper} copper")


            return None, "You are short " + "\n".join(output_list)

    elif amt < 0:

        gold, silver, copper = coin_parse(amt * -1)

        return current_coinpurse.modify_coins(gp=gold, sp=silver, cp=copper), ""

    else:
        return {"pp": 0, "gp": 0, "ep": 0, "sp": 0, "cp": 0, "total": 0.0}, ""


def grab_general_settings(svar_dict: dict) -> dict:
    """
    Grabs general settings from SVAR

    Args:
        svar_dict (dict): Dictionary from SVAR

    Return:
        dict: General settings
    """

    # Defintes default settings
    default_settings = {
        "lfg_integration": False,
        "skill":[
            "animalHandling",
            "sleightOfHand",
            "nature",
            "survival"
        ],
        "pro_rate_refund": True,
        "jack_of_trades": True,
        "reliable_talent": False,
        "success_threshold": {
            "-999": 1,
            "5": 2,
            "10": 3,
            "15": 4,
            "20": 5
        },
        "nat20": 5,
        "nat1": -1,
        "whitelisted_channel_ids": [],
        "parent_channel_inherit": False
    }

    # If settings in SVAR, create dictionary
    if "settings" in svar_dict.keys():
        settings_dict = {}

        # For each setting in default_settings
        for setting_name in default_settings.keys():

            # If setting exists in SVAR, use SVAR setting
            if setting_name in svar_dict["settings"].keys():
                settings_dict[setting_name] = svar_dict["settings"][setting_name]

            # If setting does not exist in SVAR, use default setting
            else:
                settings_dict[setting_name] = default_settings[setting_name]

        # Return settings
        return settings_dict

    # If settings not in SVAR, return default settings
    else:
        return default_settings


def grab_creature_settings(alterations: dict, creature_settings: dict) -> dict:
    """
    Grabs creature settings

    Args:
        alterations (dict): Dictionary of alterations
        creature_settings (dict): Creature settings

    Return:
        dict: Updated creature settings
    """

    # For each key, value in alterations
    for key, value in alterations.items():

        match key:

            # Success max
            case "success_max":

                # If true
                if value:
                    creature_settings["succ"] = value

            # Failure max
            case "failure_max":

                # If true
                if value:
                    creature_settings["fail"] = value

            # Taming cost
            case "cost":

                if value:
                    creature_settings["cost"] = value

    # Set color to ""
    if not "color" in creature_settings.keys():
        creature_settings["color"] = ""

    # For each setting
    for setting in ["lvl", "cost", "xp"]:

        # If it does not exist
        if setting not in creature_settings.keys():
            creature_settings[setting] = 0

    return creature_settings


def main() -> tuple(str, str, str, str):
    """
    Main program function

    Args:
        input_list (list[str]): List of user inputs

    Return:
        str: Title
        str: Body content
        str: Image URL
        str: Hex color code
    """

    # Pull character object
    ch = character()

    # If character selected
    if ch:

        # If CVAR exists
        if (cvar_test := ch.get_cvar("tame_dict")):
            cvar_dict = load_json(cvar_test)

        # If CVAR does not exist
        else:
            return "You Have Been Sneak Attacked by an Error", "CVAR does not exist", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

    # If character is not selected
    else:
        return "You Have Been Sneak Attacked by an Error", "You must have a character selected", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

    # If backup in CVAR
    if "backup" in cvar_dict.keys():
        
        # If not empty
        if cvar_dict["backup"] != {}:
            pass

        # If empty
        else:
            return "You Have Been Sneak Attacked by an Error", "No taming session to restore", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

    # If backup not in CVAR
    else:
        return "You Have Been Sneak Attacked by an Error", "No taming session to restore", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

    # If active tame
    if ch.cc_exists("Taming: Successes") and ch.cc_exists("Taming: Failures"):
        active_tame = True

    # If not active tame
    else:
        active_tame = False

    # If SVAR exists, load dictionary
    if (svar_test := get_svar("tame_settings")):
        svar_dict = load_json(svar_test)

        # If creature in SVAR
        if "creatures" in svar_dict.keys():
            
            # If creatures in SVAR
            if len(svar_dict["creatures"]) > 0:

                # If settings in SVAR
                if "settings" in svar_dict.keys():

                    # If whitelisted in settings
                    if "whitelisted_channel_ids" in svar_dict["settings"].keys():

                        # If at least one channel ID in settings
                        if len(general_settings["whitelisted_channel_ids"]) > 0:

                            # If parent channel inherit not in settings
                            if not "parent_channel_inherit" in general_settings.keys():
                                general_settings["parent_channel_inherit"] = False
                            
                            # If channel ID not in settings
                            if ctx.channel.id not in general_settings["whitelisted_channel_ids"]:

                                # If parent channel ID not in settings and not parent channel inherit
                                if ctx.channel.parent.id not in general_settings["whitelisted_channel_ids"] or not general_settings["parent_channel_inherit"]:
                                    return False, "You cannot tame in this channel/thread, speak to a staff member for additional details"

            # If creatures not in SVAR
            else:
                return "You Have Been Sneak Attacked by an Error", "There are no creatures in SVAR", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

        # If creature not in SVAR
        else:
            return "You Have Been Sneak Attacked by an Error", "There are no creatures in SVAR", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

        # Load settings
        general_settings = grab_general_settings(svar_dict)

    # If SVAR does not exist
    else:
        return "You Have Been Sneak Attacked by an Error", "SVAR settings do not exist", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

    # Output list
    output_list = []

    # If active tame
    if active_tame:

        # Load taming CCs
        success_cc, failure_cc = ch.cc("Taming: Successes"), ch.cc("Taming: Failures")

        # If completed taming
        if failure_cc.value == failure_cc.max or success_cc.value == success_cc.max:
            return "You Have Been Sneak Attacked by an Error", f"Please run `{ctx.prefix}tame clear` before restoring", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

        # If not completed
        else:

            # If current taming is in CVAR
            if "current_taming" in cvar_dict.keys():
                
                # If current creature in SVAR
                if cvar_dict["current_taming"]["creature_name"] in svar_dict["creatures"].keys():

                    # If backup creature not in SVAR
                    if not cvar_dict["backup"]["creature_name"] in svar_dict["creatures"].keys():
                        return "You Have Been Sneak Attacked by an Error", f"You cannot backup this creature as it no longer exists in SVAR settings", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

                # If current creature not in SVAR
                else:
                    return "You Have Been Sneak Attacked by an Error", f"Please run `{ctx.prefix}tame clear` before restoring", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

            # If current taming not in CVAR
            else:
                return "You Have Been Sneak Attacked by an Error", "Taming data corrupted, please delete taming CCs", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B" 

        # If alterations in CVAR
        if "alterations" in cvar_dict["current_taming"].keys():
            creature_settings = grab_creature_settings(cvar_dict["current_taming"]["alterations"], svar_dict["creatures"][cvar_dict["current_taming"]["creature_name"]])

        # If alterations not in CVAR
        else:
            creature_settings = grab_creature_settings({"success_max": None, "failure_max": None, "cost": None}, svar_dict["creatures"][cvar_dict["current_taming"]["creature_name"]])

        # Create new backup
        new_backup = cvar_dict["current_taming"].copy()

        # Add CC values
        new_backup.update ({
            "success_cc": {
                "value": success_cc.value,
                "max": success_cc.max
            },
            "failure_cc": {
                "value": failure_cc.value,
                "max": failure_cc.max
            }
        })

        # If prorated refund, calculate percent back
        if general_settings["pro_rate_refund"]:
            percent_back = 1 - (((success_cc.value / success_cc.max) * .5 + (failure_cc.value / failure_cc.max) * .5) * .5)

            # If percent back is positive
            if percent_back > 0:
                money_back = round(percent_back * cost, 2)
 
            # If percent back is not positive
            else:
                money_back = 0

        # If not money back
        else:
            money_back = 0

        # If money back
        if money_back != 0:
            new_backup["money_back"] = money_back

        # If money was given back in backup
        if "money_back" in cvar_dict["backup"]:
            money_back -= cvar_dict["backup"].pop("money_back")

        # Take/give money
        delta_money_dict, output = money_transact(ch, money_back)

        # If error
        if not delta_money_dict:
            return "You Have Been Sneak Attacked by an Error", output, "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

        # Delete CCs
        ch.delete_cc("Taming: Successes")
        ch.delete_cc("Taming: Failures")

        # Create new success CC
        success_cc = ch.create_cc(
            name="Taming: Successes",
            minVal="0",
            maxVal=str(cvar_dict["backup"]["success_cc"]["max"]),
            reset=None,
            dispType="star",
            title=f"Taming Successes: {cvar_dict['backup']['creature_name']}",
            desc=f"Taming successes for {cvar_dict['backup']['creature_name']}",
            initial_value=str(cvar_dict["backup"]["success_cc"]["value"])
        )

        # Create new failure CC
        failure_cc = ch.create_cc(
            name="Taming: Failures",
            minVal="0",
            maxVal=str(cvar_dict["backup"]["failure_cc"]["max"]),
            reset=None,
            dispType="bubble",
            title=f"Taming Failures: {cvar_dict['backup']['creature_name']}",
            desc=f"Taming failures for {cvar_dict['backup']['creature_name']}",
            initial_value=str(cvar_dict["backup"]["failure_cc"]["value"])
        )

        # Remove old stored CCs
        cvar_dict["backup"].pop("success_cc")
        cvar_dict["backup"].pop("failure_cc")

        # Move backup to current taming
        cvar_dict["current_taming"] = cvar_dict.pop("backup")

        # Move current taming to backup
        cvar_dict["backup"] = new_backup

        # Output message
        output_list.append(f"{cvar_dict['backup']['creature_name']} replaced by {cvar_dict['current_taming']['creature_name']}")

    # If not active tame
    else:
        
        # If backup creature not in SVAR
        if not cvar_dict["backup"]["creature_name"] in svar_dict["creatures"].keys():
            return "You Have Been Sneak Attacked by an Error", f"You cannot backup this creature as it no longer exists in SVAR settings", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

        # If alterations
        if "alterations" in cvar_dict["backup"].keys():
            creature_settings = grab_creature_settings(cvar_dict["backup"]["alterations"], svar_dict["creatures"][cvar_dict["backup"]["creature_name"]])

        # If no alterations
        else:
            creature_settings = grab_creature_settings({"success_max": None, "failure_max": None, "cost": None}, svar_dict["creatures"][cvar_dict["backup"]["creature_name"]])

        # If money was given back
        if "money_back" in cvar_dict["backup"].keys():
            money_back = cvar_dict["backup"].pop("money_back")

        # If money was not given back
        else:
            money_back = 0

        # Take money
        delta_money_dict, output = money_transact(ch, money_back)

        # If error
        if not delta_money_dict:
            return "You Have Been Sneak Attacked by an Error", output, "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/error.png", "#CF142B"

        # Create new success CC
        success_cc = ch.create_cc(
            name="Taming: Successes",
            minVal="0",
            maxVal=str(cvar_dict["backup"]["success_cc"]["max"]),
            reset=None,
            dispType="star",
            title=f"Taming Successes: {cvar_dict['backup']['creature_name']}",
            desc=f"Taming successes for {cvar_dict['backup']['creature_name']}",
            initial_value=str(cvar_dict["backup"]["success_cc"]["value"])
        )

        # Create new failure CC
        failure_cc = ch.create_cc(
            name="Taming: Failures",
            minVal="0",
            maxVal=str(cvar_dict["backup"]["failure_cc"]["max"]),
            reset=None,
            dispType="bubble",
            title=f"Taming Failures: {cvar_dict['backup']['creature_name']}",
            desc=f"Taming failures for {cvar_dict['backup']['creature_name']}",
            initial_value=str(cvar_dict["backup"]["failure_cc"]["value"])
        )

        # Remove old stored CCs
        cvar_dict["backup"].pop("success_cc")
        cvar_dict["backup"].pop("failure_cc")

        # Move back up to current taming
        cvar_dict["current_taming"] = cvar_dict.pop("backup")

        # output much
        output_list.append(f"{cvar_dict['current_taming']['creature_name']} has been restored")

    # Store new dictionary
    ch.set_cvar("tame_dict", dump_json(cvar_dict))

    # If money was taken/added
    if delta_money_dict["total"] != 0:

        # Store total amount
        delta_money_float = delta_money_dict.pop("total")

        # If whole number
        if delta_money_float % 1 == 0:
            delta_money_float = int(delta_money_float)

        # Emoji mapping
        coin_emoji_mapping = {
            "cp": "<:DDBCopper:953399505129205830>",
            "sp": "<:DDBSilver:953399505124995122>",
            "ep": "<:DDBElectrum:953399505129205831>",
            "gp": "<:DDBGold:953399505062080594>",
            "pp": "<:DDBPlatinum:953399504739106847>"
        }

        # Current money amount
        money_dict = ch.coinpurse.get_coins()

        # If whole number
        if (money_total := round(money_dict["total"], 2)) % 1 == 0:
            money_total = int(money_total)

        # If positive
        if delta_money_float > 0:
            sign = "+"

        # If not positive
        else:
            sign = ""

        # Compile money string
        money_str_list = [
            f"{coin_emoji_mapping[currency_shorthand]} {money_dict[currency_shorthand]} ({sign}{currency_value})"
            if currency_value != 0
            else f"{coin_emoji_mapping[currency_shorthand]} {money_dict[currency_shorthand]}"
            for currency_shorthand, currency_value in delta_money_dict.items()
        ]

        # Output money string
        output_list.append("\n".join(money_str_list))
        output_list.append(f"\n Total: {money_total}{coin_emoji_mapping['gp']}")

    return f"{name}'s Restores Their Progress", "\n".join(output_list), "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Tamecraft/main/Data/main.png", ""


# Main program function
title, f, thumb, color = main()


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}tame restore | 3/3/24 | ShadowsStride"